<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllowedCorsOriginsHelpText" xml:space="preserve">
    <value>该应用允许的 CORS 来源地址。如果你的应用需要发起后台请求，则应当设定有效的 CORS 来源，防止应用被第三方开发者嵌入到不可信位置。</value>
  </data>
  <data name="CreateAppButtonText" xml:space="preserve">
    <value>创建应用</value>
  </data>
  <data name="DescriptionHelpText" xml:space="preserve">
    <value>应用程序的描述。这将显示在用户授权页面和应用介绍页面上。</value>
  </data>
  <data name="DisplayNameHelpText" xml:space="preserve">
    <value>应用程序的名称。这将显示在和应用相关的大部分页面上，包括授权确认，应用介绍和授权管理等。</value>
  </data>
  <data name="IdHelpText" xml:space="preserve">
    <value>你的应用的标识，对应于 OpenID 协议的 &lt;code&gt;client_id&lt;/code&gt; 字段。你不能更改已经创建的标识。</value>
  </data>
  <data name="LogoUriHelpText" xml:space="preserve">
    <value>应用的 LOGO 图标文件地址（可选）。如果指定了 LOGO，则它会显示在用户授权和应用介绍页面上。</value>
  </data>
  <data name="OwnerUserNameHelpText" xml:space="preserve">
    <value>应用的所有者账户名称。管理员和应用所有者可以编辑修改应用的信息。如果修改这一栏的内容，则应用将被转移到新的所有者。如果这一栏留空，则只有管理员能修改应用信息。</value>
  </data>
  <data name="PageTitle" xml:space="preserve">
    <value>创建应用</value>
  </data>
  <data name="RedirectUrisHelpText" xml:space="preserve">
    <value>应用程序的重定向地址的集合（请在每行输入一个地址），对应于 OpenID 协议请求中的 &lt;code&gt;redirect_uri&lt;/code&gt; 字段，该集合中的每个地址都将被视为有效地址。</value>
  </data>
  <data name="ResetButtonText" xml:space="preserve">
    <value>清空内容</value>
  </data>
  <data name="SecretHelpText" xml:space="preserve">
    <value>你的应用的机密，对应于 OpenID 协议的 &lt;code&gt;client_secret&lt;/code&gt; 字段。你不能手动修改应用机密，如果需要更换机密，请单击&lt;q&gt;更换机密&lt;/q&gt;按钮。</value>
  </data>
  <data name="WebPageUriHelpText" xml:space="preserve">
    <value>应用的主页地址（可选）。如果指定了主页地址，则将在授权和介绍页面用户将能够通过超链接访问该地址。</value>
  </data>
</root>